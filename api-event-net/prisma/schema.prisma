generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String
  password    String
  phone       String
  role        UserRole      @default(common)
  address     Address?
  message     Message[]
  Participant Participant[]
  profile     Profile?
  userEvent   UserEvent[]

  @@map("users")
}

model Address {
  id           String  @id @default(uuid())
  city         String?
  state        String?
  neighborhood String?
  userId       String  @unique @map("user_id")
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("address")
}

model Profile {
  id        String  @id @default(uuid())
  bio       String?
  avatar    String?
  github    String?
  linkedin  String?
  instagram String?
  userId    String  @unique @map("user_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Event {
  id             String       @id @default(uuid())
  title          String
  description    String
  start_datetime DateTime
  end_datetime   DateTime
  location       String
  qr_code        String
  image          String
  conversationId String       @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  userEvent      UserEvent[]

  @@map("events")
}

model UserEvent {
  id      String    @id @default(uuid())
  userId  String    @map("user_id")
  eventId String    @map("event_id")
  role    EventRole @default(participant)
  event   Event     @relation(fields: [eventId], references: [id])
  user    User      @relation(fields: [userId], references: [id])

  @@map("user_event")
}

model Conversation {
  id          String        @id @default(uuid())
  isGroup     Boolean?      @default(false)
  Event       Event[]
  message     Message[]
  Participant Participant[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(uuid())
  content        String
  timeStamp      DateTime     @map("date_time")
  senderId       String       @map("sender_id")
  conversationId String       @map("conversation_id")
  isRead         Boolean      @map("is_read")
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [senderId], references: [id])

  @@map("messages")
}

model Participant {
  id             String          @id @default(uuid())
  conversationId String          @map("conversation_id")
  userId         String          @map("user_id")
  role           ParticipantRole @default(member)
  conversation   Conversation    @relation(fields: [conversationId], references: [id])
  user           User            @relation(fields: [userId], references: [id])

  @@map("participants")
}

enum UserRole {
  common
  admin
}

enum EventRole {
  owner
  speaker
  participant
}

enum ParticipantRole {
  member
  admin
}
