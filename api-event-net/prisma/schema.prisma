generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(uuid())
  name              String
  email             String
  password          String
  phone             String
  role              UserRole      @default(common)
  username          String        @map("username")
  address           Address?
  createdAt         DateTime      @default(now()) @map("created_at") @db.Timestamp
  message           Message[]
  Participant       Participant[]
  profile           Profile?
  userEvent         UserEvent[]
  friendshipsUser   Friendship[]  @relation("FriendshipsUser")
  friendshipsFriend Friendship[]  @relation("FriendshipsFriend")
  userPosts         Post[]
  userComments      Comment[]
  userLikes         Like[]
  userReposts       Repost[]

  @@map("users")
}

model Address {
  id           String  @id @default(uuid())
  city         String?
  state        String?
  neighborhood String?
  userId       String  @unique @map("user_id")
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("address")
}

model Profile {
  id        String   @id @default(uuid())
  bio       String?
  avatar    String?
  github    String?
  linkedin  String?
  instagram String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  userId    String   @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Event {
  id             String       @id @default(uuid())
  title          String
  description    String
  start_datetime DateTime
  end_datetime   DateTime
  location       String
  qr_code        String
  image          String
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamp
  conversationId String       @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  userEvent      UserEvent[]

  @@map("events")
}

model UserEvent {
  id        String     @id @default(uuid())
  userId    String     @map("user_id")
  eventId   String     @map("event_id")
  role      EventRole? @default(participant)
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamp
  event     Event      @relation(fields: [eventId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

  @@map("user_event")
}

model Friendship {
  id             String            @id @default(uuid())
  userId         String
  friendId       String
  conversationId String
  status         FriendshipStatus? @default(pending)
  createdAt      DateTime          @default(now()) @db.Timestamp
  user           User              @relation("FriendshipsUser", fields: [userId], references: [id])
  friend         User              @relation("FriendshipsFriend", fields: [friendId], references: [id])

  @@map("friendships")
}

model Conversation {
  id          String        @id @default(uuid())
  isGroup     Boolean
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamp
  Event       Event[]
  message     Message[]
  Participant Participant[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(uuid())
  content        String
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamp
  senderId       String       @map("sender_id")
  conversationId String       @map("conversation_id")
  isRead         Boolean      @map("is_read")
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [senderId], references: [id])

  @@map("messages")
}

model Participant {
  id             String           @id @default(uuid())
  conversationId String           @map("conversation_id")
  userId         String           @map("user_id")
  role           ParticipantRole? @default(member)
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamp
  conversation   Conversation     @relation(fields: [conversationId], references: [id])
  user           User             @relation(fields: [userId], references: [id])

  @@map("participants")
}

//daqui pra baixo est√° fora do mvp
model Post {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  text      String
  ownerId   String    @map("owner_id")
  owner     User      @relation(fields: [ownerId], references: [id])
  comments  Comment[]
  likes     Like[]
  reposts   Repost[]

  @@map("posts")
}

model Repost {
  id        String   @id @default(uuid())
  text      String?
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@map("reposts")
}

model Comment {
  id        String   @id @default(uuid())
  text      String   
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("likes")
}

//enums

enum FriendshipStatus {
  pending
  accepted
  blocked
}

enum UserRole {
  common
  admin
}

enum EventRole {
  owner
  speaker
  participant
}

enum ParticipantRole {
  member
  admin
}
