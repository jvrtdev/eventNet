generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  userName  String   @map("user_name")
  email     String
  password  String
  phone     String
  role      UserRole @default(common)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  address      Address?
  profile      Profile?
  userComments Comment[]
  userLikes    Like[]
  message      Message[]
  participant  Participant[]
  userPosts    Post[]
  userReposts  Repost[]
  userEvent    UserEvent[]

  @@map("users")
}

model Address {
  id           String  @id @default(uuid())
  userId       String  @unique @map("user_id")
  city         String?
  state        String?
  neighborhood String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("address")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  bio       String?
  avatar    String?
  github    String?
  linkedin  String?
  instagram String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Event {
  id             String   @id @default(uuid())
  conversationId String   @map("conversation_id")
  title          String
  description    String
  start_datetime DateTime
  end_datetime   DateTime
  location       String
  qr_code        String
  image          String
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  userEvent UserEvent[]

  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@map("events")
}

model UserEvent {
  id        String     @id @default(uuid())
  userId    String     @map("user_id")
  eventId   String     @map("event_id")
  role      EventRole? @default(participant)
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamp(6)

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("user_event")
}

model Conversation {
  id        String            @id @default(uuid())
  isGroup   Boolean           @default(false)
  status    FriendshipStatus? @default(pending)
  createdAt DateTime          @default(now()) @map("created_at") @db.Timestamp(6)

  Event       Event[]
  message     Message[]
  participant Participant[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(uuid())
  senderId       String   @map("sender_id")
  conversationId String   @map("conversation_id")
  content        String
  isRead         Boolean? @default(false) @map("is_read")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  conversation Conversation @relation(fields: [conversationId], references: [id])
  user         User         @relation(fields: [senderId], references: [id])

  @@map("messages")
}

model Participant {
  id             String           @id @default(uuid())
  conversationId String           @map("conversation_id")
  userId         String           @map("user_id")
  role           ParticipantRole? @default(member)
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamp(6)

  conversation Conversation @relation(fields: [conversationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@map("participants")
}

model Post {
  id        String   @id @default(uuid())
  ownerId   String   @map("owner_id")
  text      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  comments Comment[]
  likes    Like[]
  reposts  Repost[]

  owner User @relation(fields: [ownerId], references: [id])

  @@map("posts")
}

model Repost {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  text      String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("reposts")
}

model Comment {
  id        String   @id @default(uuid())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  text      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("likes")
}

enum FriendshipStatus {
  pending
  accepted
  blocked
}

enum UserRole {
  common
  admin
}

enum EventRole {
  owner
  speaker
  participant
}

enum ParticipantRole {
  member
  admin
}
